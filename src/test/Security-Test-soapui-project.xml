<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="fcef2bfd-c7c6-4b5e-8601-b25980989121" activeEnvironment="Default" name="Security Test" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="eb8b0ba6-2a85-409e-a5a6-7c2b702ab47c" port="8080" path="/" host="securitytestbox" name="Unsecured REST MockService"><con:settings/><con:properties/><con:restMockAction name="person" method="GET" resourcePath="/person" id="4c6b9fd1-ab38-4fe0-b6e8-697a6caad50c"><con:settings/><con:defaultResponse>Response 1</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Mock Response" id="226a6789-a18c-44c5-b308-3b383c8ede3f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
    "person": {
        "firstname": "John",
        "lastname": "Doe",
        "bsn": "123456789",
        "street" : "Dorpstraat",
        "streetnumber" : "87"
    }
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="f04eaa24-bf3b-4be4-ac6d-7262bbe960a5" port="8443" path="/" host="securitytestbox" name="Secured REST MockService"><con:settings/><con:properties/><con:restMockAction name="person" method="GET" resourcePath="/person" id="387f64e5-394c-4b9c-9425-6c7c1d85082f"><con:settings/><con:defaultResponse>Mock Response</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Mock Response" id="f18c9499-a589-4f73-9a5c-d6d09cf60e89" httpResponseStatus="200"><con:settings/><con:responseContent>{
    "person": {
        "firstname": "John",
        "lastname": "Doe",
        "bsn": "123456789",
        "street" : "Dorpstraat",
        "streetnumber" : "87"
    }
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>